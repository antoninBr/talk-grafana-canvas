{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "gridPos": {
        "h": 10,
        "w": 14,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "# Prerequisites\n\n* Kubectl\n* in directory ./demo/img/\n\n# Get pod id env variable\n\n`export grafana_pod_id=( kubectl get pod -n monitoring | grep 'grafana' | awk 'END {print $1}' | xargs echo)`\n\n\n# Copy custom background\n\n**Only png admitted**\n\n`kubectl cp -n monitoring openart-bob-ross-lake-cabin.png $grafana_pod_id:/usr/share/grafana/public/img/bg/openart-bob-ross-lake-cabin.png`\n\n",
        "mode": "markdown"
      },
      "pluginVersion": "11.0.0",
      "title": "Custom Background",
      "type": "text"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "gridPos": {
        "h": 10,
        "w": 10,
        "x": 14,
        "y": 0
      },
      "id": 3,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "# Prerequisites\n\n* Grafana source code\n* SVG Layering skills\n* React dev skills\n* A loooot of time\n\n# It's hard\n\nFollow this blog post: [blog post](https://volkovlabs.io/blog/pizzeria-canvas-20230723/)",
        "mode": "markdown"
      },
      "pluginVersion": "11.0.0",
      "title": "Custom Elements",
      "type": "text"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "gridPos": {
        "h": 10,
        "w": 17,
        "x": 0,
        "y": 10
      },
      "id": 2,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "# Prerequisites\n\n* https://svg.io/\n* Remove fill property from svg file content\n* Kubectl\n* in directory ./demo/img/\n\n# Get pod id env variable\n\n`export grafana_pod_id=( kubectl get pod -n monitoring | grep 'grafana' | awk 'END {print $1}' | xargs echo)`\n\n\n# Copy custom icons\n\n`kubectl cp -n monitoring ./kube/api.svg $grafana_pod_id:/usr/share/grafana/public/img/icons/unicons/`",
        "mode": "markdown"
      },
      "pluginVersion": "11.0.0",
      "title": "Custom Icons",
      "type": "text"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 7,
        "x": 17,
        "y": 10
      },
      "id": 4,
      "options": {
        "infinitePan": false,
        "inlineEditing": true,
        "panZoom": false,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "img/bg/bob-ross-smiling-at-you.png",
              "mode": "fixed"
            },
            "size": "fill"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [],
          "name": "Element 1716544439812",
          "placement": {
            "height": 100,
            "left": 0,
            "rotation": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "11.0.0",
      "title": "Bob Ross",
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "PBFA97CFB590B2093"
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 20
      },
      "id": 5,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<!DOCTYPE html>\n<html>\n  <body>\n  <body>\n  <div>\n    <time id=\"timer\">0:00:00.00</time>\n\t</div>\n\t<div>\n    <button id=\"toggle\">start</button>\n    <button id=\"clear\">clear</button>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"forms\" name=\"forms\" />\n    <label for=\"forms\">Forms</label>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"arrows\" name=\"arrows\" />\n    <label for=\"arrows\">Arrows</label>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"bg\" name=\"bg\" />\n    <label for=\"bg\">Background</label>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"icons\" name=\"icons\" />\n    <label for=\"icons\">Icons</label>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"metrics\" name=\"metrics\" />\n    <label for=\"metrics\">Metrics</label>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"elements\" name=\"elements\" />\n    <label for=\"elements\">Elements</label>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"buttons\" name=\"buttons\" />\n    <label for=\"buttons\">Buttons</label>\n  </div>    \n  </body>\n  <script>\n(function timer() {\n\t'use strict';\n\n\t//declare\n\tvar output = document.getElementById('timer');\n\tvar toggle = document.getElementById('toggle');\n\tvar clear = document.getElementById('clear');\n\tvar running = false;\n\tvar paused = false;\n\tvar timer;\n\t\n\t// timer start time\n\tvar then;\n\t// pause duration\n\tvar delay;\n\t// pause start time\n\tvar delayThen;\n\n\t\n\t// start timer\n\tvar start = function() {\n\t\tdelay = 0;\n\t\trunning = true;\n\t\tthen = Date.now();\n\t\ttimer = setInterval(run,51);\n\t\ttoggle.innerHTML = 'stop';\n\t};\n\t\n\t\n\t// parse time in ms for output\n\tvar parseTime = function(elapsed) {\n\t\t// array of time multiples [hours, min, sec, decimal]\n\t\tvar d = [3600000,60000,1000,10];\n\t\tvar time = [];\n\t\tvar i = 0;\n\n\t\twhile (i < d.length) {\n\t\t\tvar t = Math.floor(elapsed/d[i]);\n\n\t\t\t// remove parsed time for next iteration\n\t\t\telapsed -= t*d[i];\n\n\t\t\t// add '0' prefix to m,s,d when needed\n\t\t\tt = (i > 0 && t < 10) ? '0' + t : t;\n\t\t\ttime.push(t);\n\t\t\ti++;\n\t\t}\n\t\t\n\t\treturn time;\n\t};\n\t\n\t\n\t// run\n\tvar run = function() {\n\t\t// get output array and print\n\t\tvar time = parseTime(Date.now()-then-delay);\n\t\toutput.innerHTML = time[0] + ':' + time[1] + ':' + time[2] + '.' + time[3];\n\t};\n\t\n\t\n\t// stop\n\tvar stop = function() {\n\t\tpaused = true;\n\t\tdelayThen = Date.now();\n\t\ttoggle.innerHTML = 'resume';\n\t\tclear.dataset.state = 'visible';\n\t\tclearInterval(timer);\n\n\t\t// call one last time to print exact time\n\t\trun();\n\t};\n\t\n\t\n\t// resume\n\tvar resume = function() {\n\t\tpaused = false;\n\t\tdelay += Date.now()-delayThen;\n\t\ttimer = setInterval(run,51);\n\t\ttoggle.innerHTML = 'stop';\n\t\tclear.dataset.state = '';\n\t};\n\t\n\t\n\t// clear\n\tvar reset = function() {\n\t\trunning = false;\n\t\tpaused = false;\n\t\ttoggle.innerHTML = 'start';\n\t\toutput.innerHTML = '0:00:00.00';\n\t\tclear.dataset.state = '';\n\t};\n\t\n\t\n\t// evaluate and route\n\tvar router = function() {\n\t\tif (!running) start();\n\t\telse if (paused) resume();\n\t\telse stop();\n\t};\n\t\n\ttoggle.addEventListener('click',router);\n\tclear.addEventListener('click',reset);\n\t\n})();\n\n  </script>\n</html>\n",
        "mode": "html"
      },
      "pluginVersion": "11.0.0",
      "title": "Demo Highlights",
      "type": "text"
    }
  ],
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timeRangeUpdatedDuringEditOrView": false,
  "timepicker": {},
  "timezone": "browser",
  "title": "Playground",
  "uid": "ddmntshqpo83kf",
  "version": 1,
  "weekStart": ""
}